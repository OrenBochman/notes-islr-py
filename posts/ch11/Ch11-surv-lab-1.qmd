---
title: "Chapter 11: Survival Analysis - Lab Part 1" 
categories: [lab,python]
date: 2024-09-02
format:
   html:
      page-layout: full
---


# Survival Analysis {#sec-survival-analysis}

<a target="_blank" href="https://colab.research.google.com/github/intro-stat-learning/ISLP_labs/blob/v2.2/Ch11-surv-lab.ipynb">
<img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"/>
</a> [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/intro-stat-learning/ISLP_labs/v2.2?labpath=Ch11-surv-lab.ipynb)

- In this lab, we perform survival analyses on three separate data sets. In @sec-brain-cancer we analyze the  `BrainCancer` data  that was first described in Section~\ref{sec:KM}. 
- In [part 2](Ch11-surv-lab-2.qmd#sec-pub), we examine the  `Publication` data  from Section~\ref{sec:pub}. 
- Finally, in [part 3](Ch11-surv-lab-3.qmd#sec-call-center) we  explore a simulated call-center data set.

We begin by importing some of our libraries at this top level. This makes the code more readable, as scanning the first few lines of the notebook tell us what libraries are used in this
notebook.

```{python}
from matplotlib.pyplot import subplots
import numpy as np
import pandas as pd
from ISLP.models import ModelSpec as MS
from ISLP import load_data
```

We  also collect the new imports needed for this lab.

```{python}
from lifelines import KaplanMeierFitter, CoxPHFitter
from lifelines.statistics import logrank_test, multivariate_logrank_test
from ISLP.survival import sim_time

km = KaplanMeierFitter()
coxph = CoxPHFitter
```

## Brain Cancer Data {#sec-brain-cancer}

We begin with the `BrainCancer` data set, contained in the `ISLP` package.

```{python}
BrainCancer = load_data('BrainCancer')
BrainCancer.columns

```
    
The rows index the 88 patients, while the 8 columns contain the predictors and outcome variables.
We first briefly examine the data.

```{python}
BrainCancer['sex'].value_counts()

```
    

```{python}
BrainCancer['diagnosis'].value_counts()

```
    

```{python}
BrainCancer['status'].value_counts()

```
    
 
Before beginning an analysis, it is important to know how the
`status` variable has been coded.  Most software
uses the convention that a `status` of 1 indicates an
uncensored observation (often death), and a `status` of 0 indicates a censored
observation. But some scientists might use the opposite coding. For
the  `BrainCancer`  data set 35 patients died before the end of
the study, so we are using the conventional coding.

To begin the analysis, we re-create  the Kaplan-Meier survival curve shown in Figure~\ref{fig:survbrain}. The main
package we will use for survival analysis
is `lifelines`.
The variable  `time`  corresponds to $y_i$, the time to the $i$th event (either censoring or
death). The first argument to `km.fit` is the event time, and the
second argument is the censoring variable, with a 1 indicating an observed
failure time. The `plot()` method produces a survival curve with pointwise confidence
intervals. By default, these are  90% confidence intervals, but this can be changed
by setting the `alpha` argument to one minus the desired
confidence level.

```{python}
fig, ax = subplots(figsize=(8,8))
km = KaplanMeierFitter()
km_brain = km.fit(BrainCancer['time'], BrainCancer['status'])
km_brain.plot(label='Kaplan Meier estimate', ax=ax)

```
 
Next we create Kaplan-Meier survival curves that are stratified by
`sex`, in order to reproduce  Figure~\ref{fig:survbrain2}.
We  do this using the `groupby()` method of  a  dataframe.
This  method returns a generator that can
be  iterated over in the `for` loop. In this case,
the  items  in the `for` loop are  2-tuples  representing
the groups: the first entry is the  value
of the grouping column  `sex` while the  second  value
is the dataframe consisting of all  rows in the
dataframe matching that value of `sex`.
We will want to use this data below
in the log-rank test,  hence we store this
information in the dictionary `by_sex`. Finally,
we have also used the notion of
 *string interpolation* to automatically
label the  different lines in the  plot. String
interpolation is a powerful technique to format strings ---
`Python` has many ways to facilitate such operations.

```{python}
fig, ax = subplots(figsize=(8,8))
by_sex = {}
for sex, df in BrainCancer.groupby('sex'):
    by_sex[sex] = df
    km_sex = km.fit(df['time'], df['status'])
    km_sex.plot(label='Sex=%s' % sex, ax=ax)

```
 
As discussed in Section~\ref{sec:logrank}, we can perform a
log-rank test to compare the survival of males to females. We use
the `logrank_test()` function from the `lifelines.statistics` module.
The first two arguments are the event times, with the second
denoting the corresponding (optional) censoring indicators.

```{python}
logrank_test(by_sex['Male']['time'],
             by_sex['Female']['time'],
             by_sex['Male']['status'],
             by_sex['Female']['status'])

```
    
 
The resulting $p$-value is $0.23$, indicating no evidence of a
difference in survival between the two sexes.

Next, we  use the `CoxPHFitter()`  estimator
from `lifelines` to fit Cox proportional hazards models.
To begin, we consider a model that uses  `sex`  as the only predictor.

```{python}
coxph = CoxPHFitter # shorthand
sex_df = BrainCancer[['time', 'status', 'sex']]
model_df = MS(['time', 'status', 'sex'],
              intercept=False).fit_transform(sex_df)
cox_fit = coxph().fit(model_df,
                      'time',
                      'status')
cox_fit.summary[['coef', 'se(coef)', 'p']]

```
    
The first argument to `fit` should be a data frame containing
at least the event time (the second argument `time` in this case),
as well as an optional censoring variable (the argument `status` in this case).
Note also that the Cox model does not include an intercept, which is why
we used the `intercept=False` argument to `ModelSpec` above.
The `summary()` method delivers many columns; we chose to abbreviate its output here.
It is possible to obtain the likelihood ratio test comparing this model to the one
with no features as follows:

```{python}
cox_fit.log_likelihood_ratio_test()

```
    
Regardless of which test we use, we see that there is no clear
evidence for a difference in survival between males and females.  As
we learned in this chapter, the score test from the Cox model is
exactly equal to the log rank test statistic!

Now we fit a  model that makes use of additional predictors. We first note
that one of our `diagnosis` values is missing, hence
we drop that observation before continuing.

```{python}
cleaned = BrainCancer.dropna()
all_MS = MS(cleaned.columns, intercept=False)
all_df = all_MS.fit_transform(cleaned)
fit_all = coxph().fit(all_df,
                      'time',
                      'status')
fit_all.summary[['coef', 'se(coef)', 'p']]

```
    
 The `diagnosis` variable has been coded so that the baseline
corresponds to HG glioma. The results indicate that the risk associated with HG glioma
is more than eight times (i.e. $e^{2.15}=8.62$) the risk associated
with meningioma. In other words, after adjusting for the other
predictors, patients with HG glioma have much worse survival compared
to those with meningioma.  In addition, larger values of the Karnofsky
index, `ki`, are associated with lower risk, i.e. longer survival.

Finally, we plot estimated survival curves for each diagnosis category,
adjusting for the other predictors.  To make these plots, we set the
values of the other predictors equal to the mean for quantitative variables
and equal to the mode for categorical. To do this, we use the
`apply()` method across rows (i.e. `axis=0`) with a function
`representative` that checks if a column is categorical
or not.

```{python}
levels = cleaned['diagnosis'].unique()
def representative(series):
    if hasattr(series.dtype, 'categories'):
        return pd.Series.mode(series)
    else:
        return series.mean()
modal_data = cleaned.apply(representative, axis=0)

```
 
We make four
copies of the column means and assign the `diagnosis` column to be the four different
diagnoses.

```{python}
modal_df = pd.DataFrame(
              [modal_data.iloc[0] for _ in range(len(levels))])
modal_df['diagnosis'] = levels
modal_df

```
 
We then construct the model matrix based on the model specification `all_MS` used to fit
the model, and name the rows according to the levels of `diagnosis`.

```{python}
modal_X = all_MS.transform(modal_df)
modal_X.index = levels
modal_X

```

We can use the `predict_survival_function()` method to obtain the estimated survival function.

```{python}
predicted_survival = fit_all.predict_survival_function(modal_X)
predicted_survival

```
This returns a data frame,
whose plot methods yields the different survival curves. To avoid clutter in
the plots, we do not display confidence intervals.

```{python}
fig, ax = subplots(figsize=(8, 8))
predicted_survival.plot(ax=ax);

```
 
