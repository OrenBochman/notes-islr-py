---
title: "Chapter 2: Introduction to Python - Lab Graphics"
categories: [lab,python]
date: 2024-06-12

---

## Graphics

In `Python`, common practice is to use  the library
`matplotlib` for graphics.
However, since `Python` was not written with data analysis in mind,
  the notion of plotting is not intrinsic to the language. 
We will use the `subplots()` function
from `matplotlib.pyplot` to create a figure and the
axes onto which we plot our data.
For many more examples of how to make plots in `Python`,
readers are encouraged to visit [matplotlib.org/stable/gallery/](https://matplotlib.org/stable/gallery/index.html).

In `matplotlib`, a plot consists of a *figure* and one or more *axes*. You can think of the figure as the blank canvas upon which 
one or more plots will be displayed: it is the entire plotting window. 
The *axes* contain important information about each plot, such as its $x$- and $y$-axis labels,
title,  and more. (Note that in `matplotlib`, the word *axes* is not the plural of *axis*: a plot's *axes* contains much more information 
than just the $x$-axis and  the $y$-axis.)

We begin by importing the `subplots()` function
from `matplotlib`. We use this function
throughout when creating figures.
The function returns a tuple of length two: a figure
object as well as the relevant axes object. We will typically
pass `figsize` as a keyword argument.
Having created our axes, we attempt our first plot using its  `plot()` method.
To learn more about it, 
type `ax.plot?`.

```{python}
import numpy as np 
import pandas as pd
from matplotlib.pyplot import subplots

rng = np.random.default_rng(1)

fig, ax = subplots(figsize=(8, 8))
x = rng.standard_normal(100)
y = rng.standard_normal(100)
ax.plot(x, y);

```

We pause here to note that we have *unpacked* the tuple of length two returned by `subplots()` into the two distinct
variables `fig` and `ax`. Unpacking
is typically preferred to the following equivalent but slightly more verbose code:

```{python}
output = subplots(figsize=(8, 8))
fig = output[0]
ax = output[1]
```

We see that our earlier cell produced a line plot, which is the default. To create a scatterplot, we provide an additional argument to `ax.plot()`, indicating that circles should be displayed.

```{python}
fig, ax = subplots(figsize=(8, 8))
ax.plot(x, y, 'o');
```
Different values
of this additional argument can be used to produce different colored lines
as well as different linestyles. 



As an alternative, we could use the  `ax.scatter()` function to create a scatterplot.

```{python}
fig, ax = subplots(figsize=(8, 8))
ax.scatter(x, y, marker='o');
```
 
Notice that in the code blocks above, we have ended
the last line with a semicolon. This prevents `ax.plot(x, y)` from printing
text  to the notebook. However, it does not prevent a plot from being produced. 
 If we omit the trailing semi-colon, then we obtain the following output:  

```{python}
fig, ax = subplots(figsize=(8, 8))
ax.scatter(x, y, marker='o')

```
In what follows, we will use
 trailing semicolons whenever the text that would be output is not
germane to the discussion at hand.






To label our plot, we  make use of the `set_xlabel()`,  `set_ylabel()`, and  `set_title()` methods
of `ax`.
  

```{python}
fig, ax = subplots(figsize=(8, 8))
ax.scatter(x, y, marker='o')
ax.set_xlabel("this is the x-axis")
ax.set_ylabel("this is the y-axis")
ax.set_title("Plot of X vs Y");
```

 Having access to the figure object `fig` itself means that we can go in and change some aspects and then redisplay it. Here, we change
  the size from `(8, 8)` to `(12, 3)`.


```{python}
fig.set_size_inches(12,3)
fig
```
 
 

Occasionally we will want to create several plots within a figure. This can be
achieved by passing additional arguments to `subplots()`. 
Below, we create a  $2 \times 3$ grid of plots
in a figure of size determined by the `figsize` argument. In such
situations, there is often a relationship between the axes in the plots. For example,
all plots may have a common $x$-axis. The `subplots()` function can automatically handle
this situation when passed the keyword argument `sharex=True`.
The `axes` object below is an array pointing to different plots in the figure. 

```{python}
fig, axes = subplots(nrows=2,
                     ncols=3,
                     figsize=(15, 5))
```
We now produce a scatter plot with `'o'` in the second column of the first row and
a scatter plot with `'+'` in the third column of the second row.

```{python}
axes[0,1].plot(x, y, 'o')
axes[1,2].scatter(x, y, marker='+')
fig
```
Type  `subplots?` to learn more about 
`subplots()`. 



 
 
To save the output of `fig`, we call its `savefig()`
method. The argument `dpi` is the dots per inch, used
to determine how large the figure will be in pixels.

```{python}
fig.savefig("Figure.png", dpi=400)
fig.savefig("Figure.pdf", dpi=200);

```
 

We can continue to modify `fig` using step-by-step updates; for example, we can modify the range of the $x$-axis, re-save the figure, and even re-display it. 

```{python}
axes[0,1].set_xlim([-1,1])
fig.savefig("Figure_updated.jpg")
fig
```

We now create some more sophisticated plots. The 
`ax.contour()` method  produces a  *contour plot* 
in order to represent three-dimensional data, similar to a
topographical map.  It takes three arguments:

* A vector of `x` values (the first dimension),
* A vector of `y` values (the second dimension), and
* A matrix whose elements correspond to the `z` value (the third
dimension) for each pair of `(x,y)` coordinates.

To create `x` and `y`, weâ€™ll use the command  `np.linspace(a, b, n)`, 
which returns a vector of `n` numbers starting at  `a` and  ending at `b`.

```{python}
fig, ax = subplots(figsize=(8, 8))
x = np.linspace(-np.pi, np.pi, 50)
y = x
f = np.multiply.outer(np.cos(y), 1 / (1 + x**2))
ax.contour(x, y, f);

```
We can increase the resolution by adding more levels to the image.

```{python}
fig, ax = subplots(figsize=(8, 8))
ax.contour(x, y, f, levels=45);
```
To fine-tune the output of the
`ax.contour()`  function, take a
look at the help file by typing `?plt.contour`.
 
The `ax.imshow()`  method is similar to 
`ax.contour()`, except that it produces a color-coded plot
whose colors depend on the `z` value. This is known as a
*heatmap*, and is sometimes used to plot temperature in
weather forecasts.

```{python}
fig, ax = subplots(figsize=(8, 8))
ax.imshow(f);

```
 

## Sequences and Slice Notation


As seen above, the
function `np.linspace()`  can be used to create a sequence
of numbers.

```{python}
seq1 = np.linspace(0, 10, 11)
seq1

```
    
 
The function `np.arange()`
 returns a sequence of numbers spaced out by `step`. If `step` is not specified, then a default value of $1$ is used. Let's create a sequence
 that starts at $0$ and ends at $10$.

```{python}
seq2 = np.arange(0, 10)
seq2

```
    
Why isn't $10$ output above? This has to do with *slice* notation in `Python`. 
Slice notation  
is used to index sequences such as lists, tuples and arrays.
Suppose we want to retrieve the fourth through sixth (inclusive) entries
of a string. We obtain a slice of the string using the indexing  notation  `[3:6]`.

```{python}
"hello world"[3:6]
```
In the code block above, the notation `3:6` is shorthand for  `slice(3,6)` when used inside
`[]`. 

```{python}
"hello world"[slice(3,6)]

```

You might have expected  `slice(3,6)` to output the fourth through seventh characters in the text string (recalling that  `Python` begins its indexing at zero),  but instead it output  the fourth through sixth. 
 This also explains why the earlier `np.arange(0, 10)` command output only the integers from $0$ to $9$. 
See the documentation `slice?` for useful options in creating slices. 

    



    


    

 

    

 

    


    

 

## Indexing Data
To begin, we  create a two-dimensional `numpy` array.

```{python}
A = np.array(np.arange(16)).reshape((4, 4))
A

```
    
Typing `A[1,2]` retrieves the element corresponding to the second row and third
column. (As usual, `Python` indexes from $0.$)

```{python}
A[1,2]

```
    
The first number after the open-bracket symbol `[`
 refers to the row, and the second number refers to the column. 

### Indexing Rows, Columns, and Submatrices
 To select multiple rows at a time, we can pass in a list
  specifying our selection. For instance, `[1,3]` will retrieve the second and fourth rows:

```{python}
A[[1,3]]

```
    
To select the first and third columns, we pass in  `[0,2]` as the second argument in the square brackets.
In this case we need to supply the first argument `:` 
which selects all rows.

```{python}
A[:,[0,2]]

```
    
Now, suppose that we want to select the submatrix made up of the second and fourth 
rows as well as the first and third columns. This is where
indexing gets slightly tricky. It is natural to try  to use lists to retrieve the rows and columns:

```{python}
A[[1,3],[0,2]]

```
    
 Oops --- what happened? We got a one-dimensional array of length two identical to

```{python}
np.array([A[1,0],A[3,2]])

```
    
 Similarly,  the following code fails to extract the submatrix comprised of the second and fourth rows and the first, third, and fourth columns:

```{python}
A[[1,3],[0,2,3]]

```
    
We can see what has gone wrong here. When supplied with two indexing lists, the `numpy` interpretation is that these provide pairs of $i,j$ indices for a series of entries. That is why the pair of lists must have the same length. However, that was not our intent, since we are looking for a submatrix.

One easy way to do this is as follows. We first create a submatrix by subsetting the rows of `A`, and then on the fly we make a further submatrix by subsetting its columns.


```{python}
A[[1,3]][:,[0,2]]

```
    
    

There are more efficient ways of achieving the same result.

The *convenience function* `np.ix_()` allows us  to extract a submatrix
using lists, by creating an intermediate *mesh* object.

```{python}
idx = np.ix_([1,3],[0,2,3])
A[idx]

```
    

Alternatively, we can subset matrices efficiently using slices.
  
The slice
`1:4:2` captures the second and fourth items of a sequence, while the slice `0:3:2` captures
the first and third items (the third element in a slice sequence is the step size).

```{python}
A[1:4:2,0:3:2]

```
    

    
Why are we able to retrieve a submatrix directly using slices but not using lists?
Its because they are different `Python` types, and
are treated differently by `numpy`.
Slices can be used to extract objects from arbitrary sequences, such as strings, lists, and tuples, while the use of lists for indexing is more limited.




    

 

    

 
 

### Boolean Indexing
In `numpy`, a *Boolean* is a type  that equals either   `True` or  `False` (also represented as $1$ and $0$, respectively).
The next line creates a vector of $0$'s, represented as Booleans, of length equal to the first dimension of `A`. 

```{python}
keep_rows = np.zeros(A.shape[0], bool)
keep_rows
```
We now set two of the elements to `True`. 

```{python}
keep_rows[[1,3]] = True
keep_rows

```
    
Note that the elements of `keep_rows`, when viewed as integers, are the same as the
values of `np.array([0,1,0,1])`. Below, we use  `==` to verify their equality. When
applied to two arrays, the `==`   operation is applied elementwise.

```{python}
np.all(keep_rows == np.array([0,1,0,1]))

```
    
(Here, the function `np.all()` has checked whether
all entries of an array are `True`. A similar function, `np.any()`, can be used to check whether any entries of an array are `True`.)


   However, even though `np.array([0,1,0,1])`  and `keep_rows` are equal according to `==`, they index different sets of rows!
The former retrieves the first, second, first, and second rows of `A`. 

```{python}
A[np.array([0,1,0,1])]

```
    
 By contrast, `keep_rows` retrieves only the second and fourth rows  of `A` --- i.e. the rows for which the Boolean equals `TRUE`. 

```{python}
A[keep_rows]

```
    
This example shows that Booleans and integers are treated differently by `numpy`.


We again make use of the `np.ix_()` function
 to create a mesh containing the second and fourth rows, and the first,  third, and fourth columns. This time, we apply the function to Booleans,
 rather than lists.

```{python}
keep_cols = np.zeros(A.shape[1], bool)
keep_cols[[0, 2, 3]] = True
idx_bool = np.ix_(keep_rows, keep_cols)
A[idx_bool]

```

We can also mix a list with an array of Booleans in the arguments to `np.ix_()`:

```{python}
idx_mixed = np.ix_([1,3], keep_cols)
A[idx_mixed]

```
    
 

For more details on indexing in `numpy`, readers are referred
to the `numpy` tutorial mentioned earlier.



## Loading Data

Data sets often contain different types of data, and may have names associated with the rows or columns. 
For these reasons, they typically are best accommodated using a
 *data frame*. 
 We can think of a data frame  as a sequence
of arrays of identical length; these are the columns. Entries in the
different arrays can be combined to form a row.
 The `pandas`
library can be used to create and work with data frame objects.


### Reading in a Data Set

The first step of most analyses involves importing a data set into
`Python`.  
 Before attempting to load
a data set, we must make sure that `Python` knows where to find the file containing it. 
If the
file is in the same location
as this notebook file, then we are all set. 
Otherwise, 
the command
`os.chdir()`  can be used to *change directory*. (You will need to call `import os` before calling `os.chdir()`.) 


We will begin by reading in `Auto.csv`, available on the book website. This is a comma-separated file, and can be read in using `pd.read_csv()`: 

```{python}
import pandas as pd
Auto = pd.read_csv('Auto.csv')
Auto

```

The book website also has a whitespace-delimited version of this data, called `Auto.data`. This can be read in as follows:

```{python}
Auto = pd.read_csv('Auto.data', delim_whitespace=True)

```
 Both `Auto.csv` and `Auto.data` are simply text
files. Before loading data into `Python`, it is a good idea to view it using
a text editor or other software, such as Microsoft Excel.


 

We now take a look at the column of `Auto` corresponding to the variable `horsepower`: 

```{python}
Auto['horsepower']

```
We see that the `dtype` of this column is `object`. 
It turns out that all values of the `horsepower` column were interpreted as strings when reading
in the data. 
We can find out why by looking at the unique values.

```{python}
np.unique(Auto['horsepower'])

```
We see the culprit is the value `?`, which is being used to encode missing values.



 
To fix the problem, we must provide `pd.read_csv()` with an argument called `na_values`.
Now,  each instance of  `?` in the file is replaced with the
value `np.nan`, which means *not a number*:

```{python}
Auto = pd.read_csv('Auto.data',
                   na_values=['?'],
                   delim_whitespace=True)
Auto['horsepower'].sum()

```
    
 
The `Auto.shape`  attribute tells us that the data has 397
observations, or rows, and nine variables, or columns.

```{python}
Auto.shape

```
 
There are
various ways to deal with  missing data. 
In this case, since only five of the rows contain missing
observations,  we choose to use the `Auto.dropna()` method to simply remove these rows.

```{python}
Auto_new = Auto.dropna()
Auto_new.shape

```
    

### Basics of Selecting Rows and Columns
 
We can use `Auto.columns`  to check the variable names.

```{python}
Auto = Auto_new # overwrite the previous value
Auto.columns

```
    

Accessing the rows and columns of a data frame is similar, but not identical, to accessing the rows and columns of an array. 
Recall that the first argument to the `[]` method
is always applied to the rows of the array.  
Similarly, 
passing in a slice to the `[]` method creates a data frame whose *rows* are determined by the slice:

```{python}
Auto[:3]

```
Similarly, an array of Booleans can be used to subset the rows:

```{python}
idx_80 = Auto['year'] > 80
Auto[idx_80]

```
However, if we pass  in a list of strings to the `[]` method, then we obtain a data frame containing the corresponding set of *columns*. 

```{python}
Auto[['mpg', 'horsepower']]

```
Since we did not specify an *index* column when we loaded our data frame, the rows are labeled using integers
0 to 396.

```{python}
Auto.index

```
We can use the
`set_index()` method to re-name the rows using the contents of `Auto['name']`. 

```{python}
Auto_re = Auto.set_index('name')
Auto_re

```

```{python}
Auto_re.columns

```
We see that the column `'name'` is no longer there.
 
Now that the index has been set to `name`, we can  access rows of the data 
frame by `name` using the `{loc[]`} method of
`Auto`:

```{python}
rows = ['amc rebel sst', 'ford torino']
Auto_re.loc[rows]

```
As an alternative to using the index name, we could retrieve the 4th and 5th rows of `Auto` using the `{iloc[]`} method:

```{python}
Auto_re.iloc[[3,4]]

```
We can also use it to retrieve the 1st, 3rd and and 4th columns of `Auto_re`:

```{python}
Auto_re.iloc[:,[0,2,3]]

```
We can extract the 4th and 5th rows, as well as the 1st, 3rd and 4th columns, using
a single call to `iloc[]`:

```{python}
Auto_re.iloc[[3,4],[0,2,3]]

```
Index entries need not be unique: there are several cars  in the data frame named `ford galaxie 500`.

```{python}
Auto_re.loc['ford galaxie 500', ['mpg', 'origin']]

```
### More on Selecting Rows and Columns
Suppose now that we want to create a data frame consisting of the  `weight` and `origin`  of the subset of cars with 
`year` greater than 80 --- i.e. those built after 1980.
To do this, we first create a Boolean array that indexes the rows.
The `loc[]` method allows for Boolean entries as well as strings:

```{python}
idx_80 = Auto_re['year'] > 80
Auto_re.loc[idx_80, ['weight', 'origin']]

```


To do this more concisely, we can use an anonymous function called a `lambda`: 

```{python}
Auto_re.loc[lambda df: df['year'] > 80, ['weight', 'origin']]

```
The `lambda` call creates a function that takes a single
argument, here `df`, and returns `df['year']>80`.
Since it is created inside the `loc[]` method for the
dataframe `Auto_re`, that dataframe will be the argument supplied.
As another example of using a `lambda`, suppose that
we want all cars built after 1980 that achieve greater than 30 miles per gallon:

```{python}
Auto_re.loc[lambda df: (df['year'] > 80) & (df['mpg'] > 30),
            ['weight', 'origin']
           ]

```
The symbol `&` computes an element-wise *and* operation.
As another example, suppose that we want to retrieve all `Ford` and `Datsun`
cars with `displacement` less than 300. We check whether each `name` entry contains either the string `ford` or `datsun` using the  `str.contains()` method of the `index` attribute of 
of the dataframe:

```{python}
Auto_re.loc[lambda df: (df['displacement'] < 300)
                       & (df.index.str.contains('ford')
                       | df.index.str.contains('datsun')),
            ['weight', 'origin']
           ]

```
Here, the symbol `|` computes an element-wise *or* operation.
 
In summary, a powerful set of operations is available to index the rows and columns of data frames. For integer based queries, use the `iloc[]` method. For string and Boolean
selections, use the `loc[]` method. For functional queries that filter rows, use the `loc[]` method
with a function (typically a `lambda`) in the rows argument.

## For Loops
A `for` loop is a standard tool in many languages that
repeatedly evaluates some chunk of code while
varying different values inside the code.
For example, suppose we loop over elements of a list and compute their sum.

```{python}
total = 0
for value in [3,2,19]:
    total += value
print('Total is: {0}'.format(total))

```
The indented code beneath the line with the `for` statement is run
for each value in the sequence
specified in the `for` statement. The loop ends either
when the cell ends or when code is indented at the same level
as the original `for` statement.
We see that the final line above which prints the total is executed
only once after the for loop has terminated. Loops
can be nested by additional indentation.

```{python}
total = 0
for value in [2,3,19]:
    for weight in [3, 2, 1]:
        total += value * weight
print('Total is: {0}'.format(total))
```
Above, we summed over each combination of `value` and `weight`.
We also took advantage of the *increment* notation
in `Python`: the expression `a += b` is equivalent
to `a = a + b`. Besides
being a convenient notation, this can save time in computationally
heavy tasks in which the intermediate value of `a+b` need not
be explicitly created.

Perhaps a more
common task would be to sum over `(value, weight)` pairs. For instance,
to compute the average value of a random variable that takes on
possible values 2, 3 or 19 with probability 0.2, 0.3, 0.5 respectively
we would compute the weighted sum. Tasks such as this
can often be accomplished using the `zip()`  function that
loops over a sequence of tuples.

```{python}
total = 0
for value, weight in zip([2,3,19],
                         [0.2,0.3,0.5]):
    total += weight * value
print('Weighted average is: {0}'.format(total))

```

### String Formatting
In the code chunk above we also printed a string
displaying the total. However, the object `total`
is an  integer and not a string.
Inserting the value of something into
a string is a common task, made
simple using
some of the powerful string formatting
tools in `Python`.
Many data cleaning tasks involve
manipulating and programmatically
producing strings.

For example we may want to loop over the columns of a data frame and
print the percent missing in each column.
Letâ€™s create a data frame `D` with columns in which 20% of the entries are missing i.e. set
to `np.nan`.  Weâ€™ll create the
values in `D` from a normal distribution with mean 0 and variance 1 using `rng.standard_normal()`
and then overwrite some random entries using `rng.choice()`.

```{python}
rng = np.random.default_rng(1)
A = rng.standard_normal((127, 5))
M = rng.choice([0, np.nan], p=[0.8,0.2], size=A.shape)
A += M
D = pd.DataFrame(A, columns=['food',
                             'bar',
                             'pickle',
                             'snack',
                             'popcorn'])
D[:3]

```


```{python}
for col in D.columns:
    template = 'Column "{0}" has {1:.2%} missing values'
    print(template.format(col,
          np.isnan(D[col]).mean()))

```
We see that the `template.format()` method expects two arguments `{0}`
and `{1:.2%}`, and the latter includes some formatting
information. In particular, it specifies that the second argument should be expressed as a percent with two decimal digits.

The reference
[docs.python.org/3/library/string.html](https://docs.python.org/3/library/string.html)
includes many helpful and more complex examples.


## Additional Graphical and Numerical Summaries
We can use the `ax.plot()` or  `ax.scatter()`  functions to display the quantitative variables. However, simply typing the variable names will produce an error message,
because `Python` does not know to look in the  `Auto`  data set for those variables.

```{python}
fig, ax = subplots(figsize=(8, 8))
ax.plot(horsepower, mpg, 'o');
```
We can address this by accessing the columns directly:

```{python}
fig, ax = subplots(figsize=(8, 8))
ax.plot(Auto['horsepower'], Auto['mpg'], 'o');

```
Alternatively, we can use the `plot()` method with the call `Auto.plot()`.
Using this method,
the variables  can be accessed by name.
The plot methods of a data frame return a familiar object:
an axes. We can use it to update the plot as we did previously: 

```{python}
ax = Auto.plot.scatter('horsepower', 'mpg')
ax.set_title('Horsepower vs. MPG');
```
If we want to save
the figure that contains a given axes, we can find the relevant figure
by accessing the `figure` attribute:

```{python}
fig = ax.figure
fig.savefig('horsepower_mpg.png');
```

We can further instruct the data frame to plot to a particular axes object. In this
case the corresponding `plot()` method will return the
modified axes we passed in as an argument. Note that
when we request a one-dimensional grid of plots, the object `axes` is similarly
one-dimensional. We place our scatter plot in the middle plot of a row of three plots
within a figure.

```{python}
fig, axes = subplots(ncols=3, figsize=(15, 5))
Auto.plot.scatter('horsepower', 'mpg', ax=axes[1]);

```

Note also that the columns of a data frame can be accessed as attributes: try typing in `Auto.horsepower`. 
 
 
We now consider the `cylinders` variable. Typing in `Auto.cylinders.dtype` reveals that it is being treated as a quantitative variable. 
However, since there is only a small number of possible values for this variable, we may wish to treat it as 
 qualitative.  Below, we replace
the `cylinders` column with a categorical version of `Auto.cylinders`. The function `pd.Series()`  owes its name to the fact that `pandas` is often used in time series applications.

```{python}
Auto.cylinders = pd.Series(Auto.cylinders, dtype='category')
Auto.cylinders.dtype

```
 Now that `cylinders` is qualitative, we can display it using
 the `boxplot()` method.

```{python}
fig, ax = subplots(figsize=(8, 8))
Auto.boxplot('mpg', by='cylinders', ax=ax);

```
 
The `hist()`  method can be used to plot a *histogram*.

```{python}
fig, ax = subplots(figsize=(8, 8))
Auto.hist('mpg', ax=ax);

```
The color of the bars and the number of bins can be changed:

```{python}
fig, ax = subplots(figsize=(8, 8))
Auto.hist('mpg', color='red', bins=12, ax=ax);

```
 See `Auto.hist?` for more plotting
options.
 
We can use the `pd.plotting.scatter_matrix()`   function to create a *scatterplot matrix* to visualize all of the pairwise relationships between the columns in
a data frame.

```{python}
pd.plotting.scatter_matrix(Auto);

```
 We can also produce scatterplots
for a subset of the variables.

```{python}
pd.plotting.scatter_matrix(Auto[['mpg',
                                 'displacement',
                                 'weight']]);

```
The `describe()`  method produces a numerical summary of each column in a data frame.

```{python}
Auto[['mpg', 'weight']].describe()

```
We can also produce a summary of just a single column.

```{python}
Auto['cylinders'].describe()
Auto['mpg'].describe()

```
To exit `Jupyter`,  select `File / Shut Down`.

 


